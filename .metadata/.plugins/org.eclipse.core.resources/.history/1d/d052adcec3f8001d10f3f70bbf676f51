/**
 * TestGraphe.java													 16 mai 2023
 * IUT de Rodez, pas de copyright, ni de "copyleft".
 */
package iut.info1.sae.algorithmiquegestion.composants.tests;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;

import iut.info1.sae.algorithmiquegestion.composants.*;

/**
 * TODO : javadoc
 * @author Jonathan GUIL
 * @author Loïc FAUGIERES
 * @author Simon GUIRAUD
 * @author Samuel LACAM
 * @author Tom DOUAUD
 */
@TestInstance(Lifecycle.PER_CLASS)
class TestGraphe {
	
	Graphe grapheTeste = new Graphe(5, 5);
	
	Sommet[] sommetsGraphe = new Sommet[25];

	/**
	 * @throws java.lang.Exception
	 */
	@BeforeAll
	void initialisationTest() throws Exception {
//		this.sommetsGraphe[0] = grapheTeste.creerSommet(0);		//  ( 0 ; 0 )
//		this.sommetsGraphe[1] = grapheTeste.creerSommet(1);		//  ( 1 ; 0 )
//		this.sommetsGraphe[2] = grapheTeste.creerSommet(2);		//  ( 2 ; 0 )
//		this.sommetsGraphe[3] = grapheTeste.creerSommet(3);		//  ( 3 ; 0 )
//		this.sommetsGraphe[4] = grapheTeste.creerSommet(4);		//  ( 4 ; 0 )
//		
//		this.sommetsGraphe[5] = grapheTeste.creerSommet(5);		//  ( 0 ; 1 )
//		this.sommetsGraphe[6] = grapheTeste.creerSommet(6);		//  ( 1 ; 1 )
//		this.sommetsGraphe[7] = grapheTeste.creerSommet(7);		//  ( 2 ; 1 )
//		this.sommetsGraphe[8] = grapheTeste.creerSommet(8);		//  ( 3 ; 1 )
//		this.sommetsGraphe[9] = grapheTeste.creerSommet(9);		//  ( 4 ; 1 )
//		
//		this.sommetsGraphe[10] = grapheTeste.creerSommet(10);		//  ( 0 ; 2 )
//		this.sommetsGraphe[11] = grapheTeste.creerSommet(11);		//  ( 1 ; 2 )
//		this.sommetsGraphe[12] = grapheTeste.creerSommet(12);		//  ( 2 ; 2 )
//		this.sommetsGraphe[13] = grapheTeste.creerSommet(13);		//  ( 3 ; 2 )		
//		this.sommetsGraphe[14] = grapheTeste.creerSommet(14);		//  ( 4 ; 2 )		
//		
//		this.sommetsGraphe[15] = grapheTeste.creerSommet(15);		//  ( 0 ; 3 )		
//		this.sommetsGraphe[16] = grapheTeste.creerSommet(16);		//  ( 1 ; 3 )		
//		this.sommetsGraphe[17] = grapheTeste.creerSommet(17);		//  ( 2 ; 3 )		
//		this.sommetsGraphe[18] = grapheTeste.creerSommet(18);		//  ( 3 ; 3 )		
//		this.sommetsGraphe[19] = grapheTeste.creerSommet(19);		//  ( 4 ; 3 )		
//		
//		this.sommetsGraphe[20] = grapheTeste.creerSommet(20);		//  ( 0 ; 4 )		
//		this.sommetsGraphe[21] = grapheTeste.creerSommet(21);		//  ( 1 ; 4 )		
//		this.sommetsGraphe[22] = grapheTeste.creerSommet(22);		//  ( 2 ; 4 )		
//		this.sommetsGraphe[23] = grapheTeste.creerSommet(23);		//  ( 3 ; 4 )		
//		this.sommetsGraphe[24] = grapheTeste.creerSommet(24);		//  ( 4 ; 4 )
		
//		Graphe grapheTeste2 = new Graphe(5, 5);
	}

	@Test
	void testRecuperationCoordonnees() {
		System.out.println("Test récupération coordonnées"
		            + " pour un labyrinthe/graphe 5*5 :");
		
		// la boucle ne fonctionne pas car pour les this.sommetsGraphe[5] et supérieur,
		// leur coordonnée x ne sera pas 6, 7, 8 etc.. car c'est un labyrinthe/graphe 5*5
//		for (int x = 0; 
//			 x < this.sommetsGraphe.length; 
//			 x++) {
//			
//			//assertEquals(this.sommetsGraphe[x].getCoordonneeX(), x);
//			
//		}
		assertEquals(grapheTeste.getListeSommets()[5].getCoordonneeX(), 0);
		assertEquals(grapheTeste.getListeSommets()[5].getCoordonneeY(), 1);
		
		assertEquals(grapheTeste.getListeSommets()[3].getCoordonneeX(), 3);
		assertEquals(grapheTeste.getListeSommets()[3].getCoordonneeY(), 0);
		
		assertEquals(grapheTeste.getListeSommets()[10].getCoordonneeX(), 0);
		assertEquals(grapheTeste.getListeSommets()[10].getCoordonneeY(), 2);
		
		assertEquals(grapheTeste.getListeSommets()[22].getCoordonneeX(), 2);
		assertEquals(grapheTeste.getListeSommets()[22].getCoordonneeY(), 4);
	}
	
	@Test
	void testEstAdjacent() {
		System.out.println("Test adjacence pour un labyrinthe/graphe 5*5 :");
		                                                                                   						 // sommet 2 par rapport au sommet 1
		assertTrue(grapheTeste.estAdjacent(grapheTeste.getListeSommets()[0], grapheTeste.getListeSommets()[1])); // x + 1 et y similaire
		assertTrue(grapheTeste.estAdjacent(grapheTeste.getListeSommets()[4], grapheTeste.getListeSommets()[3])); // x - 1 et y similaire
		assertTrue(grapheTeste.estAdjacent(grapheTeste.getListeSommets()[0], grapheTeste.getListeSommets()[5])); // x similaire et y + 1
		assertTrue(grapheTeste.estAdjacent(grapheTeste.getListeSommets()[7], grapheTeste.getListeSommets()[2])); // x similaire et y - 1
		
		assertFalse(grapheTeste.estAdjacent(grapheTeste.getListeSommets()[2], grapheTeste.getListeSommets()[4])); // x + 2 et y similaire
		assertFalse(grapheTeste.estAdjacent(grapheTeste.getListeSommets()[3], grapheTeste.getListeSommets()[0])); // x - 3 et y similaire
		assertFalse(grapheTeste.estAdjacent(grapheTeste.getListeSommets()[1], grapheTeste.getListeSommets()[11])); // x similaire et y + 2
		assertFalse(grapheTeste.estAdjacent(grapheTeste.getListeSommets()[14], grapheTeste.getListeSommets()[4])); // x similaire et y - 2
		
		//test de la méthode pour des sommets placer en diagonales d'un autre sommet
		assertFalse(grapheTeste.estAdjacent(grapheTeste.getListeSommets()[7], grapheTeste.getListeSommets()[1])); // x - 1 et y - 1 
		assertFalse(grapheTeste.estAdjacent(grapheTeste.getListeSommets()[7], grapheTeste.getListeSommets()[3])); // x + 1 et y - 1
		assertFalse(grapheTeste.estAdjacent(grapheTeste.getListeSommets()[7], grapheTeste.getListeSommets()[11])); // x - 1 et y + 1
		assertFalse(grapheTeste.estAdjacent(grapheTeste.getListeSommets()[7], grapheTeste.getListeSommets()[13])); // x + 1 et y + 1
		
	}
	// TODO faire la javadoc
	@Test
	void testSommetsDeMemeMarque() {
		System.out.println("Test de sommetsDeMemeMarque : ");
		grapheTeste
		for (int i = 0; i < grapheTeste.getListeSommets().length; i++) {
			assertEquals(grapheTeste.getListeSommets()[i].getMarque(), -1);
		}
		
//		for (int i = 0; i < grapheTeste.sommetsDeMemeMarque(sommetsGraphe[17].getMarque()).length; i++) {
//			System.out.println(grapheTeste.sommetsDeMemeMarque(sommetsGraphe[17].getMarque())[i]);
//		}
		
	}
	
	//TODO faire un test de la méthode definitUneMarque
	//TODO faire la javadoc
	@Test
	void testDefinitUneMarque() {
	    System.out.println("Test d'affectation de marque : ");
	    grapheTeste.definitUneMarque(sommetsGraphe[0], sommetsGraphe[1]);
//	    System.out.println(sommetsGraphe[0].getMarque());
	    assertEquals(sommetsGraphe[0].getMarque(), 0);
	    assertEquals(sommetsGraphe[1].getMarque(), 0);
	    
	    sommetsGraphe[6].setMarque(8);
	    grapheTeste.definitUneMarque(sommetsGraphe[5], sommetsGraphe[6]);
	    assertEquals(sommetsGraphe[5].getMarque(), 8);
	    
	    sommetsGraphe[15].setMarque(4);
	    grapheTeste.definitUneMarque(sommetsGraphe[15], sommetsGraphe[16]);
	    assertEquals(sommetsGraphe[16].getMarque(), 4);
	    
	    sommetsGraphe[22].setMarque(9);
	    sommetsGraphe[17].setMarque(2);
	    sommetsGraphe[18].setMarque(2);
	    sommetsGraphe[19].setMarque(2);
//	    grapheTeste.definitUneMarque(sommetsGraphe[22], sommetsGraphe[17]); //renvoie une erreur
	    
	    
//	    assertEquals(sommetsGraphe[17].getMarque(), 9);
//	    assertEquals(sommetsGraphe[18].getMarque(), 9);
//	    assertEquals(sommetsGraphe[19].getMarque(), 9);
	    
	}
	
}

